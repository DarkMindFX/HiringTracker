// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace T4DalGenerator.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\StartupTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class StartupTemplate : StartupTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n\r\nusing System;\r\nusing System.ComponentModel.Composition;\r\nusing System.Compone" +
                    "ntModel.Composition.Hosting;\r\nusing System.IO;\r\nusing System.Reflection;\r\nusing " +
                    "System.Text;\r\nusing PPT.PhotoPrint.API.Helpers;\r\nusing PPT.PhotoPrint.API.Middle" +
                    "Ware;\r\nusing PPT.Interfaces;\r\nusing Microsoft.AspNetCore.Authentication.JwtBeare" +
                    "r;\r\nusing Microsoft.AspNetCore.Builder;\r\nusing Microsoft.AspNetCore.Hosting;\r\nus" +
                    "ing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyIn" +
                    "jection;\r\nusing Microsoft.IdentityModel.Tokens;\r\n\r\nnamespace PPT.PhotoPrint.API\r" +
                    "\n{\r\n    public class Startup\r\n    {\r\n       \r\n        public Startup(IConfigurat" +
                    "ion configuration)\r\n        {\r\n            Configuration = configuration;\r\n     " +
                    "   }\r\n\r\n        public IConfiguration Configuration { get; }\r\n\r\n        // This " +
                    "method gets called by the runtime. Use this method to add services to the contai" +
                    "ner.\r\n        public void ConfigureServices(IServiceCollection services)\r\n      " +
                    "  {\r\n            var serviceConfig = Configuration.GetSection(\"ServiceConfig\").G" +
                    "et<ServiceConfig>();\r\n            PrepareComposition();\r\n\r\n            services." +
                    "AddCors();\r\n            services.AddControllers();\r\n\r\n            // configure s" +
                    "trongly typed settings objects\r\n            var appSettingsSection = Configurati" +
                    "on.GetSection(\"AppSettings\");\r\n            services.Configure<AppSettings>(appSe" +
                    "ttingsSection);\r\n\r\n            // configure jwt authentication\r\n            var " +
                    "appSettings = appSettingsSection.Get<AppSettings>();\r\n            var key = Enco" +
                    "ding.ASCII.GetBytes(appSettings.Secret);\r\n            services.AddAuthentication" +
                    "(x =>\r\n            {\r\n                x.DefaultAuthenticateScheme = JwtBearerDef" +
                    "aults.AuthenticationScheme;\r\n                x.DefaultChallengeScheme = JwtBeare" +
                    "rDefaults.AuthenticationScheme;\r\n            })\r\n            .AddJwtBearer(x =>\r" +
                    "\n            {\r\n                x.RequireHttpsMetadata = false;\r\n               " +
                    " x.SaveToken = true;\r\n                x.TokenValidationParameters = new TokenVal" +
                    "idationParameters\r\n                {\r\n                    IssuerSigningKey = new" +
                    " SymmetricSecurityKey(key),\r\n                    ValidateIssuerSigningKey = true" +
                    ",\r\n                    ValidateIssuer = false,\r\n                    ValidateAudi" +
                    "ence = false,\r\n                    ClockSkew = TimeSpan.Zero\r\n                };" +
                    "\r\n            });\r\n\r\n            AddInjections(services, serviceConfig);\r\n      " +
                    "  }\r\n\r\n        public void Configure(IApplicationBuilder app, IWebHostEnvironmen" +
                    "t env)\r\n        {\r\n            app.UseRouting();\r\n\r\n            app.UseCors(x =>" +
                    " x\r\n                .AllowAnyOrigin()\r\n                .AllowAnyMethod()\r\n      " +
                    "          .AllowAnyHeader());\r\n\r\n            app.UseAuthentication();\r\n         " +
                    "   app.UseAuthorization();\r\n\r\n            app.UseMiddleware<JwtMiddleware>();\r\n\r" +
                    "\n            app.UseEndpoints(endpoints =>\r\n            {\r\n                endpo" +
                    "ints.MapControllers();\r\n            });\r\n        }\r\n\r\n        private void Prepa" +
                    "reComposition()\r\n        {\r\n            AggregateCatalog catalog = new Aggregate" +
                    "Catalog();\r\n            DirectoryCatalog directoryCatalog = new DirectoryCatalog" +
                    "(AssemblyDirectory);\r\n            catalog.Catalogs.Add(directoryCatalog);\r\n     " +
                    "       Container = new CompositionContainer(catalog);\r\n            Container.Com" +
                    "poseParts(this);\r\n        }\r\n\r\n        private string AssemblyDirectory\r\n       " +
                    " {\r\n            get\r\n            {\r\n                string codeBase = Assembly.G" +
                    "etExecutingAssembly().CodeBase;\r\n                UriBuilder uri = new UriBuilder" +
                    "(codeBase);\r\n                string path = Uri.UnescapeDataString(uri.Path);\r\n  " +
                    "              return Path.GetDirectoryName(path);\r\n            }\r\n        }\r\n\r\n " +
                    "       private CompositionContainer Container\r\n        {\r\n            get;\r\n    " +
                    "        set;\r\n        }\r\n\r\n        private void AddInjections(IServiceCollection" +
                    " services, ServiceConfig serviceCfg)\r\n        {\r\n            ");
            
            #line 124 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\StartupTemplate.tt"

            foreach(var t in tables)
            {
            
            
            #line default
            #line hidden
            this.Write("            var dal");
            
            #line 128 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(t.Name));
            
            #line default
            #line hidden
            this.Write("Dal = InitDal<I");
            
            #line 128 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(t.Name));
            
            #line default
            #line hidden
            this.Write("Dal>(serviceCfg);\r\n            services.AddSingleton<I");
            
            #line 129 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(t.Name));
            
            #line default
            #line hidden
            this.Write("Dal>(dal");
            
            #line 129 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(t.Name));
            
            #line default
            #line hidden
            this.Write("Dal);\r\n            services.AddSingleton<Dal.I");
            
            #line 130 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(t.Name));
            
            #line default
            #line hidden
            this.Write("Dal, Dal.");
            
            #line 130 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(t.Name));
            
            #line default
            #line hidden
            this.Write("Dal>();\r\n\r\n            ");
            
            #line 132 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\StartupTemplate.tt"

            }
            
            
            #line default
            #line hidden
            this.Write(@"        }

        private TDal InitDal<TDal>(ServiceConfig serviceCfg) where TDal : IInitializable
        {
            var dal = Container.GetExportedValue<TDal>(serviceCfg.DALType);
            var dalInitParams = dal.CreateInitParams();

            dalInitParams.Parameters = serviceCfg.DALInitParams;
            dal.Init(dalInitParams);

            return dal;

        }
    }
}
");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\StartupTemplate.tt"

private global::System.Collections.Generic.IList<DataModel.DataTable> _tablesField;

/// <summary>
/// Access the tables parameter of the template.
/// </summary>
private global::System.Collections.Generic.IList<DataModel.DataTable> tables
{
    get
    {
        return this._tablesField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool tablesValueAcquired = false;
if (this.Session.ContainsKey("tables"))
{
    this._tablesField = ((global::System.Collections.Generic.IList<DataModel.DataTable>)(this.Session["tables"]));
    tablesValueAcquired = true;
}
if ((tablesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("tables");
    if ((data != null))
    {
        this._tablesField = ((global::System.Collections.Generic.IList<DataModel.DataTable>)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class StartupTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
