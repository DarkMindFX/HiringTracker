<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ parameter name="table" type="DataModel.DataTable" #>
<#@ parameter name="modelHelper" type="T4DalGenerator.ModelHelper" #>
<#@ parameter name="generator" type="T4DalGenerator.Generators.GeneratorBase"#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using HRT.Interfaces.Entities;

namespace HRT.Interfaces
{
    public interface I<#= table.Name #>Dal : IDalBase<<#= table.Name #>>
    {
        <#= table.Name #> Get(
        <#
            var pks = generator.GetPKColumns(table);
            for(int i = 0; i < pks.Count; ++i)
            {
            var pk = pks[i];
        #>
            <#= generator.DbTypeToType(pk) #> <#=pk.Name #><#= i+1 < pks.Count ? "," : string.Empty #>
        <#
            }
        #>);

        bool Delete(
        <#
            for(int i = 0; i < pks.Count; ++i)
            {
            var pk = pks[i];
        #>
            <#= generator.DbTypeToType(pk) #> <#=pk.Name #><#= i+1 < pks.Count ? "," : string.Empty #>
        <#
            }
        #>);

        <#
            foreach(var c in table.Columns)
            {
                if(!string.IsNullOrEmpty(c.FKRefTable))
                {
        #>
        IList<<#= table.Name #>> GetBy<#=c.Name #>(<#= generator.DbTypeToType(c) #> <#=c.Name #>);
        <#
                }
            }
        #>
    }
}

