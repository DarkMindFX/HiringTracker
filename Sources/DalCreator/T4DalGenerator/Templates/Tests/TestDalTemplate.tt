<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ parameter name="table" type="DataModel.DataTable" #>
<#@ parameter name="modelHelper" type="T4DalGenerator.ModelHelper" #>
<#@ parameter name="generator" type="T4DalGenerator.Generators.GeneratorBase"#>
<#@ parameter name="testValsGet" type="System.Collections.Generic.IDictionary<string,object>" #>
<#@ parameter name="testValsInsert" type="System.Collections.Generic.IDictionary<string,object>" #>
<#@ parameter name="testValsUpdateAfter" type="System.Collections.Generic.IDictionary<string,object>" #>

using HRT.DAL.MSSQL;
using HRT.Interfaces;
using HRT.Interfaces.Entities;
using Microsoft.Extensions.Configuration;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;

<#
		var pks = generator.GetPKColumns(table);
#>

namespace Test.HRT.DAL.MSSQL
{
    public class Test<#= table.Name #>Dal : TestBase
    {
        [Test]
        public void DalInit_Success()
        {
            IConfiguration config = GetConfiguration();
            var initParams = config.GetSection("DALInitParams").Get<TestDalInitParams>();

            I<#= table.Name #>Dal dal = new <#= table.Name #>Dal();
            var dalInitParams = dal.CreateInitParams();
            dalInitParams.Parameters["ConnectionString"] = initParams.ConnectionString;
            dal.Init(dalInitParams);
        }

        [Test]
        public void <#= table.Name #>_GetAll_Success()
        {
            var dal = Prepare<#= table.Name #>Dal("DALInitParams");

            IList<<#= table.Name #>> entities = dal.GetAll();

            Assert.IsNotNull(entities);
            Assert.IsNotEmpty(entities);
        }

        [TestCase("<#= table.Name #>\\000.GetDetails.Success")]
        public void <#= table.Name #>_GetDetails_Success(string caseName)
        {
            SqlConnection conn = OpenConnection("DALInitParams");
            var dal = Prepare<#= table.Name #>Dal("DALInitParams");

            IList<object> objIds = SetupCase(conn, caseName);
<#
            for(int i = 0; i < pks.Count; ++i)
            {
#>
                var param<#= pks[i].Name #> = (<#= generator.DbTypeToType(pks[i]) #>)objIds[<#= i #>];
<#
            }
#>
            <#= table.Name #> entity = dal.Get(<# for(int i = 0; i < pks.Count; ++i) {#>param<#= pks[i].Name #><#= i+1 < pks.Count ? "," : string.Empty #><#}#>);

            TeardownCase(conn, caseName);

            Assert.IsNotNull(entity);
            <#
                foreach(var c in table.Columns)
                {
                    if(c.IsIdentity || c.IsPK)
                    {
            #>
            Assert.IsNotNull(entity.<#= c.Name #>);
            <#
                    }
                }
            #>

            <#
                foreach(var c in table.Columns)
                {
                    Type columnType = generator.GetColumnType(c);
                    if(!c.IsIdentity && testValsGet.ContainsKey(c.Name))
                    {
                        if(columnType == typeof(DateTime))
                        {
              #>
              Assert.AreEqual(DateTime.Parse("<#= testValsGet[c.Name].ToString() #>"), entity.<#= c.Name #>);
              <#
                        }
                        else if(columnType == typeof(string))
                        {
              #>
              Assert.AreEqual("<#= testValsGet[c.Name].ToString() #>", entity.<#= c.Name #>);
              <#
                        }
                        else if(columnType == typeof(bool))
                        {
              #>
              Assert.AreEqual(<#= testValsGet[c.Name].ToString().ToLower() #>, entity.<#= c.Name #>);
              <#
                        }
                        else if(testValsGet[c.Name] != null)
                        {
              #>
              Assert.AreEqual(<#= testValsGet[c.Name].ToString() #>, entity.<#= c.Name #>);
              <#
                        }
                    }
                }
            #>
        }

        [Test]
        public void <#= table.Name #>_GetDetails_InvalidId()
        {
<#
            for(int i = 0; i < pks.Count; ++i)
            {
#>
                var param<#= pks[i].Name #> = Int64.MaxValue - 1;
<#
            }
#>
            var dal = Prepare<#= table.Name #>Dal("DALInitParams");

            <#= table.Name #> entity = dal.Get(<# for(int i = 0; i < pks.Count; ++i) {#>param<#= pks[i].Name #><#= i+1 < pks.Count ? "," : string.Empty #><#}#>);

            Assert.IsNull(entity);
        }

        [TestCase("<#= table.Name #>\\010.Delete.Success")]
        public void <#= table.Name #>_Delete_Success(string caseName)
        {
            SqlConnection conn = OpenConnection("DALInitParams");
            var dal = Prepare<#= table.Name #>Dal("DALInitParams");

            IList<object> objIds = SetupCase(conn, caseName);
<#
            for(int i = 0; i < pks.Count; ++i)
            {
#>
                var param<#= pks[i].Name #> = (<#= generator.DbTypeToType(pks[i]) #>)objIds[<#= i #>];
<#
            }
#>
            bool removed = dal.Delete(<# for(int i = 0; i < pks.Count; ++i) {#>param<#= pks[i].Name #><#= i+1 < pks.Count ? "," : string.Empty #><#}#>);

            TeardownCase(conn, caseName);

            Assert.IsTrue(removed);
        }

        [Test]
        public void <#= table.Name #>_Delete_InvalidId()
        {
            var dal = Prepare<#= table.Name #>Dal("DALInitParams");
<#
            for(int i = 0; i < pks.Count; ++i)
            {
#>
                var param<#= pks[i].Name #> = Int64.MaxValue - 1;
<#
            }
#>
   
            bool removed = dal.Delete(<# for(int i = 0; i < pks.Count; ++i) {#>param<#= pks[i].Name #><#= i+1 < pks.Count ? "," : string.Empty #><#}#>);
            Assert.IsFalse(removed);

        }

        [TestCase("<#= table.Name #>\\020.Insert.Success")]
        public void <#= table.Name #>_Insert_Success(string caseName)
        {
            SqlConnection conn = OpenConnection("DALInitParams");
            SetupCase(conn, caseName);

            var dal = Prepare<#= table.Name #>Dal("DALInitParams");

            var entity = new <#= table.Name #>();
            <#
                foreach(var c in table.Columns)
                {
                    Type columnType = generator.GetColumnType(c);
                    if(!c.IsIdentity && testValsInsert.ContainsKey(c.Name))
                    {
                        if(columnType == typeof(DateTime))
                        {
              #>
              entity.<#= c.Name #> = DateTime.Parse("<#= testValsInsert[c.Name].ToString() #>");
              <#
                        }
                        else if(columnType == typeof(string))
                        {
              #>
              entity.<#= c.Name #> = "<#= testValsInsert[c.Name].ToString() #>";
              <#
                        }
                        else if(columnType == typeof(bool))
                        {
              #>
              entity.<#= c.Name #> = <#= testValsInsert[c.Name].ToString().ToLower() #>;              
              <#
                        }
                        else if(testValsInsert[c.Name] != null)
                        {
              #>
              entity.<#= c.Name #> = <#= testValsInsert[c.Name].ToString() #>;
              <#
                        }
                    }
                }
            #>
            
            entity = dal.Insert(entity);

            TeardownCase(conn, caseName);

            Assert.IsNotNull(entity);
            <#
                foreach(var c in table.Columns)
                {
                    if(c.IsIdentity || c.IsPK)
                    {
            #>
            Assert.IsNotNull(entity.<#= c.Name #>);
            <#
                    }
                }
            #>

            <#
                foreach(var c in table.Columns)
                {
                    Type columnType = generator.GetColumnType(c);
                    if(!c.IsIdentity && testValsInsert.ContainsKey(c.Name))
                    {
                        if(columnType == typeof(DateTime))
                        {
              #>
              Assert.AreEqual(DateTime.Parse("<#= testValsInsert[c.Name].ToString() #>"), entity.<#= c.Name #>);
              <#
                        }
                        else if(columnType == typeof(string))
                        {
              #>
              Assert.AreEqual("<#= testValsInsert[c.Name].ToString() #>", entity.<#= c.Name #>);
              <#
                        }
                        else if(columnType == typeof(bool))
                        {
              #>
              Assert.AreEqual(<#= testValsInsert[c.Name].ToString().ToLower() #>, entity.<#= c.Name #>);
              <#
                        }
                        else if(testValsInsert[c.Name] != null)
                        {
              #>
              Assert.AreEqual(<#= testValsInsert[c.Name].ToString() #>, entity.<#= c.Name #>);
              <#
                        }
                    }
                }
            #>

        }

        [TestCase("<#= table.Name #>\\030.Update.Success")]
        public void <#= table.Name #>_Update_Success(string caseName)
        {
            SqlConnection conn = OpenConnection("DALInitParams");
            var dal = Prepare<#= table.Name #>Dal("DALInitParams");

            IList<object> objIds = SetupCase(conn, caseName);
<#
            for(int i = 0; i < pks.Count; ++i)
            {
#>
                var param<#= pks[i].Name #> = (<#= generator.DbTypeToType(pks[i]) #>)objIds[<#= i #>];
<#
            }
#>
            <#= table.Name #> entity = dal.Get(<# for(int i = 0; i < pks.Count; ++i) {#>param<#= pks[i].Name #><#= i+1 < pks.Count ? "," : string.Empty #><#}#>);

            <#
                foreach(var c in table.Columns)
                {
                    Type columnType = generator.GetColumnType(c);
                    if(!c.IsIdentity && !c.IsPK && testValsUpdateAfter.ContainsKey(c.Name))
                    {
                        if(columnType == typeof(DateTime))
                        {
              #>
              entity.<#= c.Name #> = DateTime.Parse("<#= testValsUpdateAfter[c.Name].ToString() #>");
              <#
                        }
                        else if(columnType == typeof(string))
                        {
              #>
              entity.<#= c.Name #> = "<#= testValsUpdateAfter[c.Name].ToString() #>";
              <#
                        }
                        else if(columnType == typeof(bool))
                        {
              #>
              entity.<#= c.Name #> = <#= testValsUpdateAfter[c.Name].ToString().ToLower() #>;              
              <#
                        }
                        else if(testValsUpdateAfter[c.Name] != null)
                        {
              #>
              entity.<#= c.Name #> = <#= testValsUpdateAfter[c.Name].ToString() #>;
              <#
                        }
                    }
                }
            #>

            entity = dal.Update(entity);

            TeardownCase(conn, caseName);

            Assert.IsNotNull(entity);
            <#
                foreach(var c in table.Columns)
                {
                    if(c.IsIdentity || c.IsPK)
                    {
            #>
            Assert.IsNotNull(entity.<#= c.Name #>);
            <#
                    }
                }
            #>

            <#
                foreach(var c in table.Columns)
                {
                    Type columnType = generator.GetColumnType(c);
                    if(!c.IsIdentity && testValsUpdateAfter.ContainsKey(c.Name))
                    {
                        if(columnType == typeof(DateTime))
                        {
              #>
              Assert.AreEqual(DateTime.Parse("<#= testValsUpdateAfter[c.Name].ToString() #>"), entity.<#= c.Name #>);
              <#
                        }
                        else if(columnType == typeof(string))
                        {
              #>
              Assert.AreEqual("<#= testValsUpdateAfter[c.Name].ToString() #>", entity.<#= c.Name #>);
              <#
                        }
                        else if(columnType == typeof(bool))
                        {
              #>
              Assert.AreEqual(<#= testValsUpdateAfter[c.Name].ToString().ToLower() #>, entity.<#= c.Name #>);
              <#
                        }
                        else if(testValsUpdateAfter[c.Name] != null)
                        {
              #>
              Assert.AreEqual(<#= testValsUpdateAfter[c.Name].ToString() #>, entity.<#= c.Name #>);
              <#
                        }
                    }
                }
            #>

        }

        [Test]
        public void <#= table.Name #>_Update_InvalidId()
        {
            var dal = Prepare<#= table.Name #>Dal("DALInitParams");

            var entity = new <#= table.Name #>();
            <#
                foreach(var c in table.Columns)
                {
                    Type columnType = generator.GetColumnType(c);
                    if(!c.IsIdentity && testValsUpdateAfter.ContainsKey(c.Name))
                    {
                        if(columnType == typeof(DateTime))
                        {
              #>
              entity.<#= c.Name #> = DateTime.Parse("<#= testValsUpdateAfter[c.Name].ToString() #>");
              <#
                        }
                        else if(columnType == typeof(string))
                        {
              #>
              entity.<#= c.Name #> = "<#= testValsUpdateAfter[c.Name].ToString() #>";
              <#
                        }
                        else if(columnType == typeof(bool))
                        {
              #>
              entity.<#= c.Name #> = <#= testValsUpdateAfter[c.Name].ToString().ToLower() #>;              
              <#
                        }
                        else if(testValsUpdateAfter[c.Name] != null)
                        {
              #>
              entity.<#= c.Name #> = <#= testValsUpdateAfter[c.Name].ToString() #>;
              <#
                        }
                    }
                }
            #>

            try
            {
                entity = dal.Update(entity);

                Assert.Fail("Fail - exception was expected, but wasn't thrown.");
            }
            catch (Exception ex)
            {
                Assert.Pass("Success - exception thrown as expected");
            }
        }

        protected I<#= table.Name #>Dal Prepare<#= table.Name #>Dal(string configName)
        {
            IConfiguration config = GetConfiguration();
            var initParams = config.GetSection(configName).Get<TestDalInitParams>();

            I<#= table.Name #>Dal dal = new <#= table.Name #>Dal();
            var dalInitParams = dal.CreateInitParams();
            dalInitParams.Parameters["ConnectionString"] = initParams.ConnectionString;
            dal.Init(dalInitParams);

            return dal;
        }
    }
}
