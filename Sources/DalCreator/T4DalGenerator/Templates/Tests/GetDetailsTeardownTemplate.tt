<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".sql"#>

<#@ parameter name="table" type="DataModel.DataTable" #>
<#@ parameter name="modelHelper" type="T4DalGenerator.ModelHelper" #>
<#@ parameter name="generator" type="T4DalGenerator.Generators.GeneratorBase"#>
<#@ parameter name="testValsGet" type="System.Collections.Generic.IDictionary<string,object>" #>

<#
	foreach(var c in table.Columns)
	{
		string val = string.Empty;

		if (!c.IsIdentity && testValsGet.ContainsKey(c.Name))
        {
			Type columnType = generator.GetColumnType(c);
            if (testValsGet[c.Name] != null)
            {
				string quote = string.Empty;
                if(columnType == typeof(string) || columnType == typeof(DateTime))
                {
					quote = "'";
                }
				val = quote + testValsGet[c.Name].ToString() + quote;
            
			}
            else
			{
				val = "NULL";
			}
        }
		else
		{
			val = "NULL";
		}
#>
<#= generator.GenerateVariableDeclaration(c) #> = <#= val #>
<#
	}
#> 

DELETE FROM [<#= table.Name #>]
FROM 
	[dbo].[<#= table.Name #>] e
WHERE
<#
	for(int i = 0; i < table.Columns.Count; ++i) 
	{
		var c = table.Columns[i];
		if(!c.IsIdentity)
		{
#>
	(CASE WHEN @<#= c.Name #> IS NOT NULL THEN (CASE WHEN [<#= c.Name #>] = @<#= c.Name #> THEN 1 ELSE 0 END) ELSE 1 END) = 1 <#= i + 1 < table.Columns.Count ? "AND" : string.Empty #>
<#
		}
	}
#>
