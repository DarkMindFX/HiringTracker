// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace T4DalGenerator.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class JsEntityUI : JsEntityUIBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            
            #line 12 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"
 
    var pks = generator.GetPKColumns(table); 
    var fks = generator.GetFKColumns(table).Select( c =>  c.FKRefTable ).Distinct();
    var entityPlural = modelHelper.Pluralize(table.Name);

            
            #line default
            #line hidden
            this.Write(@"
import React from 'react';
import { Link, withRouter  } from 'react-router-dom'
import { TextField } from '@material-ui/core';
import { Button } from '@material-ui/core';
import Alert from '@material-ui/lab/Alert';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogContent from '@material-ui/core/DialogContent';
import DialogContentText from '@material-ui/core/DialogContentText';
import DialogTitle from '@material-ui/core/DialogTitle';
import SkillsList from '../components/SkillsList';

const PageHelper = require(""../helpers/PageHelper"");
const ");
            
            #line 31 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entityPlural));
            
            #line default
            #line hidden
            this.Write("Dal = require(\'../dal/");
            
            #line 31 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entityPlural));
            
            #line default
            #line hidden
            this.Write("Dal\');\r\n");
            
            #line 32 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"
 
foreach(var fk in fks) 
{

            
            #line default
            #line hidden
            this.Write("const ");
            
            #line 36 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelHelper.Pluralize(fk)));
            
            #line default
            #line hidden
            this.Write("Dal = require(\'../dal/");
            
            #line 36 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelHelper.Pluralize(fk)));
            
            #line default
            #line hidden
            this.Write("Dal\');\r\n");
            
            #line 37 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"

}

            
            #line default
            #line hidden
            this.Write("const { ");
            
            #line 40 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("Dto } = require(\'hrt.dto\')\r\n\r\nconst constants = require(\'../constants\');\r\nconst {" +
                    " v4: uuidv4 } = require(\'uuid\');\r\n\r\nclass ");
            
            #line 45 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(@"Page extends React.Component {

    _pageHelper = null;

    constructor(props) {
        super(props);

        this._pageHelper = new PageHelper(this.props);

        this.state = { 
            operation: this.props.match.params.operation,
            id: this.props.match.params.id ? parseInt(this.props.match.params.id) : null,
            canEdit: this.props.match.params.operation ? (this.props.match.params.operation.toLowerCase() == 'new' || 
                                                          this.props.match.params.operation.toLowerCase() == 'edit' ? true : false) : false,
            position: this._createEmptyPositionObj(),

            showDeleteConfirm: false,
            showError: false,
            showSuccess: false,
            error: null,
            success: null
        };

");
            
            #line 68 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"

foreach(var c in table.Columns)
{

            
            #line default
            #line hidden
            this.Write("    this.on");
            
            #line 72 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(c.Name));
            
            #line default
            #line hidden
            this.Write("Changed = this.on");
            
            #line 72 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(c.Name));
            
            #line default
            #line hidden
            this.Write("Changed.bind(this);\r\n");
            
            #line 73 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"

}

            
            #line default
            #line hidden
            this.Write(@"
        this.onDepartmentChanged = this.onDepartmentChanged.bind(this);
        this.onStatusChanged = this.onStatusChanged.bind(this);
        this.onTitleChanged = this.onTitleChanged.bind(this);
        this.onShortDescChanged = this.onShortDescChanged.bind(this);
        this.onDescChanged = this.onDescChanged.bind(this);

        this.onSaveClicked = this.onSaveClicked.bind(this);
        this.onDeleteClicked = this.onDeleteClicked.bind(this);
        this.onDeleteCancel = this.onDeleteCancel.bind(this);
        this.onDeleteConfirm = this.onDeleteConfirm.bind(this);

        this._get");
            
            #line 88 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(" = this._get");
            
            #line 88 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(".bind(this);\r\n\r\n");
            
            #line 90 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"

foreach(var c in table.Columns)
{

            
            #line default
            #line hidden
            this.Write("    this._get");
            
            #line 94 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelHelper.Pluralize(c.Name)));
            
            #line default
            #line hidden
            this.Write("Changed = this._get");
            
            #line 94 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelHelper.Pluralize(c.Name)));
            
            #line default
            #line hidden
            this.Write("Changed.bind(this);\r\n");
            
            #line 95 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"

}

            
            #line default
            #line hidden
            this.Write("\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        const token = localStorage.getIte" +
                    "m(constants.SESSION_TOKEN_KEY);\r\n        console.log(\'Token: \', token);\r\n       " +
                    " if(token != null) {\r\n            let obj = this;\r\n");
            
            #line 107 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"

var promisesDals = string.Empty;
foreach(var fk in fks)
{
    promisesDals += "\t\t\tobj._get" + modelHelper.Pluralize(fk) +  "().then( () => {\r\n";
}

promisesDals += "\t\t\tobj._get" + table.Name + "().then( () => {} );\r\n\t\t\t";

foreach(var fk in fks)
{
    promisesDals += "});";
}


            
            #line default
            #line hidden
            this.Write("            ");
            
            #line 122 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(promisesDals));
            
            #line default
            #line hidden
            this.Write("\r\n        }\r\n        else {\r\n            console.log(\'No token - need to login\')\r" +
                    "\n            this._redirectToLogin();           \r\n        }\r\n    }\r\n\r\n    onStat" +
                    "usChanged(event) {\r\n\r\n        let updatedState = this.state;        \r\n\r\n        " +
                    "let newStatusId = parseInt(event.target.value);\r\n       \r\n        updatedState.p" +
                    "osition.StatusID = newStatusId > 0 ? newStatusId : null;\r\n\r\n        this.setStat" +
                    "e(updatedState);\r\n    }  \r\n    \r\n    onDepartmentChanged(event) {\r\n\r\n        let" +
                    " updatedState = this.state;        \r\n\r\n        let newDepartmentId = parseInt(ev" +
                    "ent.target.value);\r\n       \r\n        updatedState.position.DepartmentID = newDep" +
                    "artmentId > 0 ? newDepartmentId : null;\r\n\r\n        this.setState(updatedState);\r" +
                    "\n    } \r\n\r\n    onSkillChanged(updatedSkill) {\r\n\r\n        let updatedState = this" +
                    ".state;\r\n\r\n        let skill = updatedState.position.Skills.find( s => { return " +
                    "s.id == updatedSkill.id; } );\r\n\r\n        if(skill != null) {\r\n            skill." +
                    "SkillID = updatedSkill.SkillID;\r\n            skill.SkillProficiencyID = updatedS" +
                    "kill.SkillProficiencyID;\r\n            skill.IsMandatory = updatedSkill.IsMandato" +
                    "ry;\r\n\r\n            this.setState(updatedState);\r\n        }  \r\n        \r\n        " +
                    "console.log(\"onSkillChanged\", this.state.position.Skills);\r\n    }   \r\n\r\n    onSk" +
                    "illAdded(newSkill) {\r\n        let updatedState = this.state;\r\n        let newSki" +
                    "llRec = new PositionSkillDto();\r\n         \r\n        newSkillRec.id = newSkill.id" +
                    ";\r\n        newSkillRec.PositionID = this.state.id;\r\n        newSkillRec.SkillID " +
                    "= newSkill.SkillID;\r\n        newSkillRec.SkillProficiencyID = newSkill.SkillProf" +
                    "iciencyID;\r\n        newSkillRec.IsMandatory = newSkill.IsMandatory;\r\n        \r\n " +
                    "       updatedState.position.Skills.push(newSkillRec);\r\n\r\n        this.setState(" +
                    "updatedState);\r\n\r\n    }\r\n\r\n    onSkillDeleted(id) {\r\n        let updatedState = " +
                    "this.state;\r\n        let idx = updatedState.position.Skills.findIndex( s => { re" +
                    "turn s.id == id; } );\r\n        if(idx >= 0) {\r\n            updatedState.position" +
                    ".Skills.splice(idx, 1);\r\n            this.setState(updatedState);\r\n        }\r\n  " +
                    "  }\r\n\r\n    onTitleChanged(event) {\r\n        const newTitle = event.target.value;" +
                    "\r\n\r\n        let updatedState = this.state;\r\n        updatedState.position.Title " +
                    "= newTitle;\r\n        this.setState(updatedState);\r\n    }\r\n\r\n    onShortDescChang" +
                    "ed(event) {\r\n        const newShortDesc = event.target.value;\r\n\r\n        let upd" +
                    "atedState = this.state;\r\n        updatedState.position.ShortDesc = newShortDesc;" +
                    "\r\n        this.setState(updatedState);\r\n    }\r\n\r\n    onDescChanged(event) {\r\n   " +
                    "     const newDesc = event.target.value;\r\n\r\n        let updatedState = this.stat" +
                    "e;\r\n        updatedState.position.Description = newDesc;\r\n        this.setState(" +
                    "updatedState);\r\n    }\r\n\r\n    onSaveClicked() {\r\n\r\n        console.log(\"Saving po" +
                    "sition: \", this.state.position);\r\n        \r\n        const reqPosition = new Posi" +
                    "tionDto();\r\n        reqPosition.ID = this.state.id;\r\n        reqPosition.Title =" +
                    " this.state.position.Title;\r\n        reqPosition.ShortDesc = this.state.position" +
                    ".ShortDesc;\r\n        reqPosition.Description = this.state.position.Description;\r" +
                    "\n        reqPosition.StatusID = this.state.position.StatusID;\r\n\r\n        let req" +
                    "PositionSkills = this.state.position.Skills.map( ps => { \r\n            var dto =" +
                    " new PositionSkillDto();\r\n            dto.SkillID = ps.SkillID;\r\n            dto" +
                    ".SkillProficiencyID = ps.SkillProficiencyID;\r\n            dto.IsMandatory = ps.I" +
                    "sMandatory;\r\n            return dto;\r\n        });        \r\n\r\n        console.log" +
                    "(\"Saving Position: \", reqPosition);   \r\n        console.log(\"Saving Skills: \", r" +
                    "eqPositionSkills);         \r\n        \r\n        let dalPos = new PositionsDal();\r" +
                    "\n\r\n        let obj = this;\r\n\r\n        function upsertPositionThen(result) {\r\n   " +
                    "         const updatedState = obj.state;\r\n\r\n            if(result.status == cons" +
                    "tants.HTTP_OK || result.status == constants.HTTP_Created) {\r\n                upd" +
                    "atedState.showSuccess = true;\r\n                updatedState.showError = false;\r\n" +
                    "                if(result.status == constants.HTTP_Created) {\r\n                 " +
                    "   updatedState.id = result.data.ID;\r\n                    updatedState.success =" +
                    " `Position was created. ID: ${updatedState.id}`;\r\n                }\r\n           " +
                    "     else {\r\n                    updatedState.success = `Position was updated`; " +
                    "               \r\n                }\r\n\r\n                obj.setState(updatedState)" +
                    ";\r\n            \r\n                let dalPositionSkills = new PositionSkillsDal()" +
                    ";\r\n                dalPositionSkills.setPositionSkills(obj.state.id ? obj.state." +
                    "id : result.data.ID, reqPositionSkills)\r\n                                .then( " +
                    "(res) => { upsertSkillsThen(res) } )\r\n                                .catch( (r" +
                    "es) => { upsertCatch(res) } );\r\n            }\r\n            else {\r\n             " +
                    "   var error = JSON.parse(result.data.response);\r\n                updatedState.s" +
                    "howError = true;\r\n                updatedState.error = error.Message;   \r\n      " +
                    "          \r\n                obj.setState(updatedState);\r\n            }\r\n\r\n      " +
                    "      \r\n        }        \r\n\r\n        function upsertSkillsThen(result) {\r\n      " +
                    "      const updatedState = obj.state;\r\n\r\n            if(result.status == constan" +
                    "ts.HTTP_OK || result.status == constants.HTTP_Created) {\r\n                update" +
                    "dState.showSuccess = true;\r\n                updatedState.showError = false;\r\n   " +
                    "         }\r\n            else {\r\n                var error = JSON.parse(result.da" +
                    "ta.response);\r\n                updatedState.showError = true;\r\n                u" +
                    "pdatedState.error = error.Message;          \r\n            }\r\n\r\n            obj.s" +
                    "etState(updatedState);\r\n        }\r\n\r\n        function upsertCatch(err) {\r\n      " +
                    "      const updatedState = obj.state;\r\n            const errMsg = `Error: ${err}" +
                    "`\r\n            updatedState.showSuccess = false;\r\n            updatedState.showE" +
                    "rror = true;\r\n            updatedState.error = errMsg; \r\n            obj.setStat" +
                    "e(updatedState);\r\n        }\r\n\r\n        if(this.state.id != null) {\r\n            " +
                    "dalPos.updatePosition(reqPosition)\r\n                                    .then( (" +
                    "res) => { upsertPositionThen(res); } )\r\n                                    .cat" +
                    "ch( (err) => { upsertCatch(err); });\r\n        }\r\n        else {\r\n            dal" +
                    "Pos.insertPosition(reqPosition)\r\n                                    .then( (res" +
                    ") => { upsertPositionThen(res); } )\r\n                                    .catch(" +
                    " (err) => { upsertCatch(err); });        \r\n        }\r\n        \r\n    }\r\n\r\n    onD" +
                    "eleteClicked() {\r\n        const updatedState = this.state;\r\n        updatedState" +
                    ".showDeleteConfirm = true;\r\n        this.setState(updatedState);\r\n    }\r\n\r\n    o" +
                    "nDeleteCancel() {\r\n        const updatedState = this.state;\r\n        updatedStat" +
                    "e.showDeleteConfirm = false;\r\n        this.setState(updatedState);\r\n    }\r\n\r\n   " +
                    " onDeleteConfirm() {  \r\n        \r\n        let dalPos = new PositionsDal();\r\n    " +
                    "    let obj = this;\r\n\r\n        dalPos.deletePosition(this.state.id).then( (res) " +
                    "=> {\r\n            if(res.status == constants.HTTP_OK) {\r\n                obj.pro" +
                    "ps.history.push(\"/positions\");                \r\n            }\r\n            else " +
                    "{\r\n                const updatedState = obj.state;\r\n                updatedState" +
                    ".showSuccess = false;\r\n                updatedState.showError = true;\r\n         " +
                    "       updatedState.error = res.data.Message; \r\n                updatedState.sho" +
                    "wDeleteConfirm = false;\r\n                obj.setState(updatedState);            " +
                    "   \r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        let skills = " +
                    "this._getPositionSkillsAsList();\r\n\r\n        const styleError = {\r\n            di" +
                    "splay: this.state.showError ? \"block\" : \"none\"\r\n        }\r\n\r\n        const style" +
                    "Success = {\r\n            display: this.state.showSuccess ? \"block\" : \"none\"\r\n   " +
                    "     }   \r\n        \r\n        const styleDeleteBtn = {\r\n            display: this" +
                    ".state.id ? \"block\" : \"none\"\r\n        }\r\n\r\n        var lstDepartments = this._pr" +
                    "epareOptionsList( this.state.departments ? Object.values(this.state.departments)" +
                    " : null, true );\r\n        \r\n        var lstPositionStatuses = this._prepareOptio" +
                    "nsList( this.state.positionstatuses ? Object.values(this.state.positionstatuses)" +
                    " : null, false );\r\n        \r\n        return (\r\n            <div>\r\n              " +
                    "   <table>\r\n                    <tbody>\r\n                        <tr>\r\n         " +
                    "                   <td style={{width: 450}}></td>\r\n                            <" +
                    "td>\r\n                                <Button variant=\"contained\" color=\"primary\"" +
                    "\r\n                                        onClick={ () => this.onSaveClicked() }" +
                    ">Save</Button>\r\n\r\n                                <Button variant=\"contained\" co" +
                    "lor=\"secondary\"\r\n                                        style={styleDeleteBtn}\r" +
                    "\n                                        onClick={ () => this.onDeleteClicked() " +
                    "}>Delete</Button>\r\n\r\n                                <Button variant=\"contained\"" +
                    " component={Link} to=\"/positions\">Cancel</Button>\r\n                            <" +
                    "/td>\r\n                        </tr>\r\n                        <tr>\r\n             " +
                    "               <td colSpan={2}>\r\n                                <Alert severity" +
                    "=\"error\" style={styleError}>Error: {this.state.error}</Alert>\r\n                 " +
                    "               <Alert severity=\"success\" style={styleSuccess}>Success! {this.sta" +
                    "te.success}</Alert>                                \r\n                           " +
                    " </td>\r\n                        </tr>                    \r\n                     " +
                    "   <tr>                            \r\n                            <td colSpan={2}" +
                    ">\r\n                                \r\n                                <TextField " +
                    " id=\"title\" \r\n                                            fullWidth\r\n           " +
                    "                                 type=\"text\" \r\n                                 " +
                    "           variant=\"filled\" \r\n                                            label=" +
                    "\"Position Title\" \r\n                                            value={this.state" +
                    ".position.Title}\r\n                                            onChange={ (event)" +
                    " => { this.onTitleChanged(event) } }\r\n                                          " +
                    "  />\r\n                                \r\n                            </td>\r\n     " +
                    "                   </tr>                    \r\n                        <tr>\r\n    " +
                    "                        <td colSpan={2}>\r\n                                <TextF" +
                    "ield  id=\"shortDesc\" \r\n                                            fullWidth\r\n  " +
                    "                                          type=\"text\" \r\n                        " +
                    "                    variant=\"filled\" \r\n                                         " +
                    "   label=\"Short Description\" \r\n                                            value" +
                    "={this.state.position.ShortDesc}\r\n                                            on" +
                    "Change={ (event) => { this.onShortDescChanged(event) } }\r\n                      " +
                    "                      /></td>\r\n                        </tr>\r\n                  " +
                    "      <tr>\r\n                            <td colSpan={1}>\r\n                      " +
                    "          <TextField      key=\"cbDepartment\" \r\n                                 " +
                    "               fullWidth\r\n                                                select" +
                    " \r\n                                                label=\"Department\" \r\n        " +
                    "                                        value={ (this.state.position && this.sta" +
                    "te.position.DepartmentID) ? this.state.position.DepartmentID : \'-1\' }\r\n         " +
                    "                                       onChange={ (event) => this.onDepartmentCh" +
                    "anged(event) }>\r\n                                        {\r\n                    " +
                    "                        lstDepartments \r\n                                       " +
                    " }\r\n                                </TextField>\r\n                            </" +
                    "td>\r\n                        </tr>\r\n                        <tr>\r\n              " +
                    "              <td colSpan={1}>\r\n                                <TextField      " +
                    "key=\"cbStatus\" \r\n                                                fullWidth\r\n    " +
                    "                                            select \r\n                           " +
                    "                     label=\"Status\" \r\n                                          " +
                    "      value={ (this.state.position && this.state.position.StatusID) ? this.state" +
                    ".position.StatusID : Object.keys(this.state.positionstatuses)[0] }\r\n            " +
                    "                                    onChange={ (event) => this.onStatusChanged(e" +
                    "vent) }>\r\n                                        {\r\n                           " +
                    "                 lstPositionStatuses\r\n                                        }\r" +
                    "\n                                </TextField>\r\n                            </td>" +
                    "\r\n                        </tr>\r\n                        <tr>\r\n                 " +
                    "           <td colSpan={4}>Position Details</td>\r\n                        </tr>\r" +
                    "\n                        <tr>\r\n                            <td colSpan={4}>\r\n   " +
                    "                             <TextField  id=\"desc\" \r\n                           " +
                    "                 type=\"text\" \r\n                                            varia" +
                    "nt=\"filled\" \r\n                                            multiline \r\n          " +
                    "                                  fullWidth\r\n                                   " +
                    "         defaultValue={this.state.position.Description}\r\n                       " +
                    "                     onChange={ (event) => { this.onDescChanged(event) } }\r\n    " +
                    "                                        rows=\"10\"/>\r\n                           " +
                    " </td>\r\n                        </tr>\r\n                        <tr>\r\n           " +
                    "                 <td colSpan={4}>\r\n                                \r\n           " +
                    "                     <SkillsList id=\"positionSkills\"\r\n                          " +
                    "          skills={ skills }\r\n                                    canEdit={ this." +
                    "state.canEdit }\r\n                                    showMustHave = { true }\r\n  " +
                    "                                  dictSkills = { this.state.skills }\r\n          " +
                    "                          dictProficiencies = { this.state.skillProficiences }\r\n" +
                    "                                    onSkillAdded = { this.onSkillAdded }\r\n      " +
                    "                              onSkillChanged = { this.onSkillChanged }\r\n        " +
                    "                            onSkillDeleted = { this.onSkillDeleted }\r\n          " +
                    "                      />\r\n                                \r\n                    " +
                    "        </td>\r\n                        </tr>\r\n                    </tbody>\r\n    " +
                    "            </table>\r\n\r\n                <Dialog open={this.state.showDeleteConfi" +
                    "rm} onClose={() => { this.onDeleteCancel() }} aria-labelledby=\"form-dialog-title" +
                    "\">\r\n                    <DialogTitle id=\"form-dialog-title\">Delete Position</Dia" +
                    "logTitle>\r\n                    <DialogContent>\r\n                    <DialogConte" +
                    "ntText>\r\n                        Are you sure you want to delete this position?\r" +
                    "\n                    </DialogContentText>                    \r\n                 " +
                    "   </DialogContent>\r\n                    <DialogActions>\r\n                    <B" +
                    "utton onClick={() => { this.onDeleteCancel() }} color=\"primary\">\r\n              " +
                    "          Cancel\r\n                    </Button>\r\n                    <Button onC" +
                    "lick={() => { this.onDeleteConfirm() }} color=\"primary\">\r\n                      " +
                    "  Delete\r\n                    </Button>\r\n                    </DialogActions>\r\n " +
                    "               </Dialog>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    _create" +
                    "EmptyPositionObj() {\r\n        let pos = new PositionDto();\r\n        pos.Skills =" +
                    " [];\r\n        pos.StatusID = 1;\r\n\r\n        return pos;\r\n    }\r\n\r\n    async _getP" +
                    "osition()\r\n    {\r\n        let updatedState = this.state;\r\n                  \r\n  " +
                    "      let dalPositions = new PositionsDal();\r\n        let response = await dalPo" +
                    "sitions.getPosition(this.state.id);\r\n\r\n        if(response.status == constants.H" +
                    "TTP_OK)\r\n        {\r\n            updatedState.position = response.data;          " +
                    "      \r\n        }\r\n        else if(response.status == constants.HTTP_Unauthorize" +
                    "d)\r\n        {\r\n            this._redirectToLogin();\r\n        }\r\n        else \r\n " +
                    "       {\r\n            this._showError(updatedState, response);\r\n        }\r\n     " +
                    "   \r\n        this.setState(updatedState);        \r\n    }\r\n\r\n    async _getPositi" +
                    "onSkills()\r\n    {\r\n        let updatedState = this.state;\r\n\r\n        if(updatedS" +
                    "tate.position)\r\n        {\r\n                    \r\n            let dalPositionSkil" +
                    "ls = new PositionSkillsDal();\r\n            let response = await dalPositionSkill" +
                    "s.getPositionSkillsByPosition(this.state.id);\r\n\r\n            if(response.status " +
                    "== constants.HTTP_OK)\r\n            {\r\n                const skills = response.da" +
                    "ta;                     \r\n                updatedState.position.Skills = skills." +
                    "map(s => { s.id = uuidv4(); return s; });                \r\n            }\r\n      " +
                    "      else if(response.status == constants.HTTP_Unauthorized)\r\n            {\r\n  " +
                    "              this._redirectToLogin();\r\n            }\r\n            else \r\n      " +
                    "      {\r\n                this._showError(updatedState, response);\r\n            }" +
                    "\r\n        }        \r\n        this.setState(updatedState);        \r\n    }\r\n\r\n    " +
                    "async _getDepartments()\r\n    {\r\n        let updatedState = this.state;\r\n        " +
                    "if(updatedState.departments == null)\r\n        {            \r\n            let dal" +
                    "Departments = new DepartmentsDal();\r\n            let response = await dalDepartm" +
                    "ents.getDepartments();\r\n\r\n            if(response.status == constants.HTTP_OK)\r\n" +
                    "            {\r\n                updatedState.departments = {};\r\n\r\n               " +
                    " for(let s in response.data)\r\n                {\r\n                    updatedStat" +
                    "e.departments[ response.data[s].ID ] = response.data[s];\r\n                }\r\n   " +
                    "         }\r\n            else if(response.status == constants.HTTP_Unauthorized)\r" +
                    "\n            {\r\n                this._redirectToLogin();\r\n            }\r\n       " +
                    "     else \r\n            {\r\n                this._showError(updatedState, respons" +
                    "e);\r\n            }\r\n        }\r\n        this.setState(updatedState);\r\n    }\r\n\r\n  " +
                    "  async _getPositionStatuses()\r\n    {\r\n        let updatedState = this.state;\r\n " +
                    "       if(updatedState.positionstatuses == null)\r\n        {            \r\n       " +
                    "     let dalPositionStatuses = new PositionStatusesDal();\r\n            let respo" +
                    "nse = await dalPositionStatuses.getPositionStatuses();\r\n\r\n            if(respons" +
                    "e.status == constants.HTTP_OK)\r\n            {\r\n                updatedState.posi" +
                    "tionstatuses = {};\r\n\r\n                for(let s in response.data)\r\n             " +
                    "   {\r\n                    updatedState.positionstatuses[ response.data[s].ID ] =" +
                    " response.data[s];\r\n                }\r\n            }\r\n            else if(respon" +
                    "se.status == constants.HTTP_Unauthorized)\r\n            {\r\n                this._" +
                    "redirectToLogin();\r\n            }\r\n            else \r\n            {\r\n           " +
                    "     this._showError(updatedState, response);\r\n            }\r\n        }\r\n       " +
                    " this.setState(updatedState);\r\n    }\r\n\r\n\r\n    async _getSkills()\r\n    {\r\n       " +
                    " let updatedState = this.state;\r\n        if(updatedState.skills == null)\r\n      " +
                    "  {            \r\n            let dalSkills = new SkillsDal();\r\n            let r" +
                    "esponse = await dalSkills.getSkills();\r\n\r\n            if(response.status == cons" +
                    "tants.HTTP_OK)\r\n            {\r\n                updatedState.skills = {};\r\n\r\n    " +
                    "            for(let s in response.data)\r\n                {\r\n                    " +
                    "updatedState.skills[ response.data[s].ID ] = response.data[s];\r\n                " +
                    "}\r\n            }\r\n            else if(response.status == constants.HTTP_Unauthor" +
                    "ized)\r\n            {\r\n                this._redirectToLogin();\r\n            }\r\n " +
                    "           else \r\n            {\r\n                this._showError(updatedState, r" +
                    "esponse);\r\n            }\r\n        }\r\n        this.setState(updatedState);\r\n    }" +
                    "\r\n\r\n    async _getSkillProficiencies()\r\n    {\r\n        let updatedState = this.s" +
                    "tate;\r\n        if(updatedState.skillProficiences == null)\r\n        {            " +
                    "\r\n            let dalSkillProficiencies = new SkillProficienciesDal();\r\n        " +
                    "    let response = await dalSkillProficiencies.getSkillProficiencies();\r\n\r\n     " +
                    "       if(response.status == constants.HTTP_OK)\r\n            {\r\n                " +
                    "updatedState.skillProficiences = {};\r\n\r\n                for(let s in response.da" +
                    "ta)\r\n                {\r\n                    updatedState.skillProficiences[ resp" +
                    "onse.data[s].ID ] = response.data[s];\r\n                }\r\n            }\r\n       " +
                    "     else if(response.status == constants.HTTP_Unauthorized)\r\n            {\r\n   " +
                    "             this._redirectToLogin();\r\n            }\r\n            else \r\n       " +
                    "     {\r\n                this._showError(updatedState, response);\r\n            }\r" +
                    "\n        }\r\n        this.setState(updatedState);\r\n    }\r\n\r\n    _getPositionSkill" +
                    "sAsList() {\r\n        let skills = [];\r\n\r\n        if(this.state.position.Skills )" +
                    " {    \r\n\r\n            let obj = this;\r\n            \r\n            this.state.posi" +
                    "tion.Skills.forEach( s => {\r\n\r\n                let skill = {\r\n                  " +
                    "  id: s.id,\r\n                    SkillID: s.SkillID, \r\n                    Skill" +
                    "ProficiencyID: s.SkillProficiencyID, \r\n                    IsMandatory: s.IsMand" +
                    "atory\r\n                };\r\n                skills.push(skill);\r\n            })\r\n" +
                    "        }  \r\n      \r\n        return skills;\r\n    }\r\n\r\n    _showError(updatedStat" +
                    "e, response) {\r\n        var error = JSON.parse(response.data.response);\r\n       " +
                    " updatedState.showError = true;\r\n        updatedState.error = error.Message;\r\n  " +
                    "  }\r\n\r\n    _redirectToLogin()\r\n    {\r\n        this._pageHelper.redirectToLogin(`" +
                    "/position/${this.state.operation}` + (this.state.id ? `/${this.state.id}` : ``))" +
                    ";        \r\n    }\r\n\r\n    _prepareOptionsList(objs, hasEmptyVal) \r\n    {\r\n        " +
                    "var lst = [];\r\n        \r\n        if(hasEmptyVal) {\r\n            lst.push( <optio" +
                    "n key=\'-1\' value=\'-1\'>[Empty]</option> );\r\n        }\r\n\r\n        if(objs) {\r\n    " +
                    "        lst.push(\r\n                objs.map( (i) => (\r\n                    <opti" +
                    "on key={i.ID} value={i.ID}>\r\n                        {i.Name}\r\n                 " +
                    "   </option>\r\n                ))\r\n            )\r\n        }\r\n\r\n        return lst" +
                    ";\r\n    }\r\n}\r\n\r\nexport default withRouter(PositionPage);");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\Projects\Test Projects\HiringTracker\Sources\DalCreator\T4DalGenerator\Templates\JsEntityUI.tt"

private global::DataModel.DataTable _tableField;

/// <summary>
/// Access the table parameter of the template.
/// </summary>
private global::DataModel.DataTable table
{
    get
    {
        return this._tableField;
    }
}

private global::T4DalGenerator.ModelHelper _modelHelperField;

/// <summary>
/// Access the modelHelper parameter of the template.
/// </summary>
private global::T4DalGenerator.ModelHelper modelHelper
{
    get
    {
        return this._modelHelperField;
    }
}

private global::T4DalGenerator.Generators.GeneratorBase _generatorField;

/// <summary>
/// Access the generator parameter of the template.
/// </summary>
private global::T4DalGenerator.Generators.GeneratorBase generator
{
    get
    {
        return this._generatorField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool tableValueAcquired = false;
if (this.Session.ContainsKey("table"))
{
    this._tableField = ((global::DataModel.DataTable)(this.Session["table"]));
    tableValueAcquired = true;
}
if ((tableValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("table");
    if ((data != null))
    {
        this._tableField = ((global::DataModel.DataTable)(data));
    }
}
bool modelHelperValueAcquired = false;
if (this.Session.ContainsKey("modelHelper"))
{
    this._modelHelperField = ((global::T4DalGenerator.ModelHelper)(this.Session["modelHelper"]));
    modelHelperValueAcquired = true;
}
if ((modelHelperValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("modelHelper");
    if ((data != null))
    {
        this._modelHelperField = ((global::T4DalGenerator.ModelHelper)(data));
    }
}
bool generatorValueAcquired = false;
if (this.Session.ContainsKey("generator"))
{
    this._generatorField = ((global::T4DalGenerator.Generators.GeneratorBase)(this.Session["generator"]));
    generatorValueAcquired = true;
}
if ((generatorValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("generator");
    if ((data != null))
    {
        this._generatorField = ((global::T4DalGenerator.Generators.GeneratorBase)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class JsEntityUIBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
